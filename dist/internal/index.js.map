{"version":3,"sources":["../../src/internal/index.ts","../../src/anthropic-messages-language-model.ts","../../src/anthropic-error.ts","../../src/anthropic-messages-options.ts","../../src/anthropic-prepare-tools.ts","../../src/get-cache-control.ts","../../src/tool/web-search_20250305.ts","../../src/tool/web-fetch_20250910.ts","../../src/convert-to-anthropic-messages-prompt.ts","../../src/tool/code-execution_20250522.ts","../../src/map-anthropic-stop-reason.ts","../../src/tool/bash_20241022.ts","../../src/tool/bash_20250124.ts","../../src/tool/computer_20241022.ts","../../src/tool/computer_20250124.ts","../../src/tool/text-editor_20241022.ts","../../src/tool/text-editor_20250124.ts","../../src/tool/text-editor_20250429.ts","../../src/anthropic-tools.ts"],"sourcesContent":["export { AnthropicMessagesLanguageModel } from '../anthropic-messages-language-model';\nexport { anthropicTools } from '../anthropic-tools';\nexport type { AnthropicMessagesModelId } from '../anthropic-messages-options';\nexport { prepareTools } from '../anthropic-prepare-tools';\n","import {\n  JSONObject,\n  JSONValue,\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2FunctionTool,\n  LanguageModelV2Prompt,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  ParseResult,\n  Resolvable,\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  generateId,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { anthropicFailedResponseHandler } from './anthropic-error';\nimport {\n  AnthropicMessagesModelId,\n  anthropicProviderOptions,\n} from './anthropic-messages-options';\nimport { prepareTools } from './anthropic-prepare-tools';\nimport { convertToAnthropicMessagesPrompt } from './convert-to-anthropic-messages-prompt';\nimport { mapAnthropicStopReason } from './map-anthropic-stop-reason';\n\nconst citationSchemas = {\n  webSearchResult: z.object({\n    type: z.literal('web_search_result_location'),\n    cited_text: z.string(),\n    url: z.string(),\n    title: z.string(),\n    encrypted_index: z.string(),\n  }),\n  pageLocation: z.object({\n    type: z.literal('page_location'),\n    cited_text: z.string(),\n    document_index: z.number(),\n    document_title: z.string().nullable(),\n    start_page_number: z.number(),\n    end_page_number: z.number(),\n  }),\n  charLocation: z.object({\n    type: z.literal('char_location'),\n    cited_text: z.string(),\n    document_index: z.number(),\n    document_title: z.string().nullable(),\n    start_char_index: z.number(),\n    end_char_index: z.number(),\n  }),\n};\n\nconst citationSchema = z.discriminatedUnion('type', [\n  citationSchemas.webSearchResult,\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation,\n]);\n\nconst documentCitationSchema = z.discriminatedUnion('type', [\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation,\n]);\n\ntype Citation = z.infer<typeof citationSchema>;\nexport type DocumentCitation = z.infer<typeof documentCitationSchema>;\nexport type AnthropicProviderMetadata = SharedV2ProviderMetadata & {\n  usage?: Record<string, JSONValue>;\n};\n\nfunction processCitation(\n  citation: Citation,\n  citationDocuments: Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }>,\n  generateId: () => string,\n  onSource: (source: any) => void,\n) {\n  if (citation.type === 'page_location' || citation.type === 'char_location') {\n    const source = createCitationSource(\n      citation,\n      citationDocuments,\n      generateId,\n    );\n    if (source) {\n      onSource(source);\n    }\n  }\n}\n\nfunction createCitationSource(\n  citation: DocumentCitation,\n  citationDocuments: Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }>,\n  generateId: () => string,\n) {\n  const documentInfo = citationDocuments[citation.document_index];\n  if (!documentInfo) {\n    return null;\n  }\n\n  const providerMetadata =\n    citation.type === 'page_location'\n      ? {\n          citedText: citation.cited_text,\n          startPageNumber: citation.start_page_number,\n          endPageNumber: citation.end_page_number,\n        }\n      : {\n          citedText: citation.cited_text,\n          startCharIndex: citation.start_char_index,\n          endCharIndex: citation.end_char_index,\n        };\n\n  return {\n    type: 'source' as const,\n    sourceType: 'document' as const,\n    id: generateId(),\n    mediaType: documentInfo.mediaType,\n    title: citation.document_title ?? documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic: providerMetadata,\n    },\n  };\n}\n\ntype AnthropicMessagesConfig = {\n  provider: string;\n  baseURL: string;\n  headers: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  buildRequestUrl?: (baseURL: string, isStreaming: boolean) => string;\n  transformRequestBody?: (args: Record<string, any>) => Record<string, any>;\n  supportedUrls?: () => LanguageModelV2['supportedUrls'];\n  generateId?: () => string;\n};\n\nexport class AnthropicMessagesLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: AnthropicMessagesModelId;\n\n  private readonly config: AnthropicMessagesConfig;\n  private readonly generateId: () => string;\n\n  constructor(\n    modelId: AnthropicMessagesModelId,\n    config: AnthropicMessagesConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = config.generateId ?? generateId;\n  }\n\n  supportsUrl(url: URL): boolean {\n    return url.protocol === 'https:';\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  get supportedUrls() {\n    return this.config.supportedUrls?.() ?? {};\n  }\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens = 4096, // 4096: max model output tokens TODO update default in v5\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'frequencyPenalty',\n      });\n    }\n\n    if (presencePenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'presencePenalty',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'seed',\n      });\n    }\n\n    if (responseFormat?.type === 'json') {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'responseFormat',\n          details:\n            'JSON response format requires a schema. ' +\n            'The response format is ignored.',\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'tools',\n          details:\n            'JSON response format does not support tools. ' +\n            'The provided tools are ignored.',\n        });\n      }\n    }\n\n    const jsonResponseTool: LanguageModelV2FunctionTool | undefined =\n      responseFormat?.type === 'json' && responseFormat.schema != null\n        ? {\n            type: 'function',\n            name: 'json',\n            description: 'Respond with a JSON object.',\n            inputSchema: responseFormat.schema,\n          }\n        : undefined;\n\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions,\n      schema: anthropicProviderOptions,\n    });\n\n    const { prompt: messagesPrompt, betas: messagesBetas } =\n      await convertToAnthropicMessagesPrompt({\n        prompt,\n        sendReasoning: anthropicOptions?.sendReasoning ?? true,\n        warnings,\n      });\n\n    const isThinking = anthropicOptions?.thinking?.type === 'enabled';\n    const thinkingBudget = anthropicOptions?.thinking?.budgetTokens;\n\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n\n      // provider specific settings:\n      ...(isThinking && {\n        thinking: { type: 'enabled', budget_tokens: thinkingBudget },\n      }),\n\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages,\n    };\n\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new UnsupportedFunctionalityError({\n          functionality: 'thinking requires a budget',\n        });\n      }\n\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'temperature',\n          details: 'temperature is not supported when thinking is enabled',\n        });\n      }\n\n      if (topK != null) {\n        baseArgs.top_k = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topK',\n          details: 'topK is not supported when thinking is enabled',\n        });\n      }\n\n      if (topP != null) {\n        baseArgs.top_p = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topP',\n          details: 'topP is not supported when thinking is enabled',\n        });\n      }\n\n      // adjust max tokens to account for thinking:\n      baseArgs.max_tokens = maxOutputTokens + thinkingBudget;\n    }\n\n    const {\n      tools: anthropicTools,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas,\n    } = prepareTools(\n      jsonResponseTool != null\n        ? {\n            tools: [jsonResponseTool],\n            toolChoice: { type: 'tool', toolName: jsonResponseTool.name },\n            disableParallelToolUse: true,\n          }\n        : {\n            tools: tools ?? [],\n            toolChoice,\n            disableParallelToolUse: anthropicOptions?.disableParallelToolUse,\n          },\n    );\n\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools,\n        tool_choice: anthropicToolChoice,\n      },\n      warnings: [...warnings, ...toolWarnings],\n      betas: new Set([...messagesBetas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null,\n    };\n  }\n\n  private async getHeaders({\n    betas,\n    headers,\n  }: {\n    betas: Set<string>;\n    headers: Record<string, string | undefined> | undefined;\n  }) {\n    return combineHeaders(\n      await resolve(this.config.headers),\n      betas.size > 0 ? { 'anthropic-beta': Array.from(betas).join(',') } : {},\n      headers,\n    );\n  }\n\n  private buildRequestUrl(isStreaming: boolean): string {\n    return (\n      this.config.buildRequestUrl?.(this.config.baseURL, isStreaming) ??\n      `${this.config.baseURL}/messages`\n    );\n  }\n\n  private transformRequestBody(args: Record<string, any>): Record<string, any> {\n    return this.config.transformRequestBody?.(args) ?? args;\n  }\n\n  private extractCitationDocuments(prompt: LanguageModelV2Prompt): Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }> {\n    const isCitationPart = (part: {\n      type: string;\n      mediaType?: string;\n      providerOptions?: { anthropic?: { citations?: { enabled?: boolean } } };\n    }) => {\n      if (part.type !== 'file') {\n        return false;\n      }\n\n      if (\n        part.mediaType !== 'application/pdf' &&\n        part.mediaType !== 'text/plain'\n      ) {\n        return false;\n      }\n\n      const anthropic = part.providerOptions?.anthropic;\n      const citationsConfig = anthropic?.citations as\n        | { enabled?: boolean }\n        | undefined;\n      return citationsConfig?.enabled ?? false;\n    };\n\n    return prompt\n      .filter(message => message.role === 'user')\n      .flatMap(message => message.content)\n      .filter(isCitationPart)\n      .map(part => {\n        // TypeScript knows this is a file part due to our filter\n        const filePart = part as Extract<typeof part, { type: 'file' }>;\n        return {\n          title: filePart.filename ?? 'Untitled Document',\n          filename: filePart.filename,\n          mediaType: filePart.mediaType,\n        };\n      });\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        anthropicMessagesResponseSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const content: Array<LanguageModelV2Content> = [];\n\n    // map response content to content array\n    for (const part of response.content) {\n      switch (part.type) {\n        case 'text': {\n          // when a json response tool is used, the tool call is returned as text,\n          // so we ignore the text content:\n          if (!usesJsonResponseTool) {\n            content.push({ type: 'text', text: part.text });\n\n            // Process citations if present\n            if (part.citations) {\n              for (const citation of part.citations) {\n                processCitation(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                  source => content.push(source),\n                );\n              }\n            }\n          }\n          break;\n        }\n        case 'thinking': {\n          content.push({\n            type: 'reasoning',\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'redacted_thinking': {\n          content.push({\n            type: 'reasoning',\n            text: '',\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'tool_use': {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool\n              ? {\n                  type: 'text',\n                  text: JSON.stringify(part.input),\n                }\n              : {\n                  type: 'tool-call',\n                  toolCallId: part.id,\n                  toolName: part.name,\n                  input: JSON.stringify(part.input),\n                },\n          );\n\n          break;\n        }\n        case 'server_tool_use': {\n          if (part.name === 'web_search' || part.name === 'code_execution') {\n            content.push({\n              type: 'tool-call',\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true,\n            });\n          }\n\n          break;\n        }\n        case 'web_search_tool_result': {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              result: part.content.map(result => ({\n                url: result.url,\n                title: result.title,\n                pageAge: result.page_age ?? null,\n                encryptedContent: result.encrypted_content,\n                type: result.type,\n              })),\n              providerExecuted: true,\n            });\n\n            for (const result of part.content) {\n              content.push({\n                type: 'source',\n                sourceType: 'url',\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: result.page_age ?? null,\n                  },\n                },\n              });\n            }\n          } else {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              isError: true,\n              result: {\n                type: 'web_search_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n        case 'code_execution_tool_result': {\n          if (part.content.type === 'code_execution_result') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code,\n              },\n              providerExecuted: true,\n            });\n          } else if (part.content.type === 'code_execution_tool_result_error') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              isError: true,\n              result: {\n                type: 'code_execution_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n      }\n    }\n\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool,\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: response.usage.cache_read_input_tokens ?? undefined,\n      },\n      request: { body: args },\n      response: {\n        id: response.id ?? undefined,\n        modelId: response.model ?? undefined,\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage as JSONObject,\n          cacheCreationInputTokens:\n            response.usage.cache_creation_input_tokens ?? null,\n        },\n      },\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const body = { ...args, stream: true };\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        anthropicMessagesChunkSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n\n    const contentBlocks: Record<\n      number,\n      | {\n          type: 'tool-call';\n          toolCallId: string;\n          toolName: string;\n          input: string;\n          providerExecuted?: boolean;\n        }\n      | { type: 'text' | 'reasoning' }\n    > = {};\n\n    let providerMetadata: AnthropicProviderMetadata | undefined = undefined;\n\n    let blockType:\n      | 'text'\n      | 'thinking'\n      | 'tool_use'\n      | 'redacted_thinking'\n      | 'server_tool_use'\n      | 'web_search_tool_result'\n      | 'code_execution_tool_result'\n      | undefined = undefined;\n\n    const generateId = this.generateId;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<z.infer<typeof anthropicMessagesChunkSchema>>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            if (!chunk.success) {\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            switch (value.type) {\n              case 'ping': {\n                return; // ignored\n              }\n\n              case 'content_block_start': {\n                const contentBlockType = value.content_block.type;\n\n                blockType = contentBlockType;\n\n                switch (contentBlockType) {\n                  case 'text': {\n                    contentBlocks[value.index] = { type: 'text' };\n                    controller.enqueue({\n                      type: 'text-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'redacted_thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data,\n                        } satisfies AnthropicReasoningMetadata,\n                      },\n                    });\n                    return;\n                  }\n\n                  case 'tool_use': {\n                    contentBlocks[value.index] = usesJsonResponseTool\n                      ? { type: 'text' }\n                      : {\n                          type: 'tool-call',\n                          toolCallId: value.content_block.id,\n                          toolName: value.content_block.name,\n                          input: '',\n                        };\n\n                    controller.enqueue(\n                      usesJsonResponseTool\n                        ? { type: 'text-start', id: String(value.index) }\n                        : {\n                            type: 'tool-input-start',\n                            id: value.content_block.id,\n                            toolName: value.content_block.name,\n                          },\n                    );\n                    return;\n                  }\n\n                  case 'server_tool_use': {\n                    if (\n                      value.content_block.name === 'web_search' ||\n                      value.content_block.name === 'code_execution'\n                    ) {\n                      contentBlocks[value.index] = {\n                        type: 'tool-call',\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: '',\n                        providerExecuted: true,\n                      };\n                      controller.enqueue({\n                        type: 'tool-input-start',\n                        id: value.content_block.id,\n                        toolName: value.content_block.name,\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'web_search_tool_result': {\n                    const part = value.content_block;\n\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        result: part.content.map(result => ({\n                          url: result.url,\n                          title: result.title,\n                          pageAge: result.page_age ?? null,\n                          encryptedContent: result.encrypted_content,\n                          type: result.type,\n                        })),\n                        providerExecuted: true,\n                      });\n\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: 'source',\n                          sourceType: 'url',\n                          id: generateId(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: result.page_age ?? null,\n                            },\n                          },\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        isError: true,\n                        result: {\n                          type: 'web_search_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n                    return;\n                  }\n\n                  case 'code_execution_tool_result': {\n                    const part = value.content_block;\n\n                    if (part.content.type === 'code_execution_result') {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    } else if (\n                      part.content.type === 'code_execution_tool_result_error'\n                    ) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        isError: true,\n                        result: {\n                          type: 'code_execution_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'content_block_stop': {\n                // when finishing a tool call block, send the full tool call:\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n\n                  switch (contentBlock.type) {\n                    case 'text': {\n                      controller.enqueue({\n                        type: 'text-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'reasoning': {\n                      controller.enqueue({\n                        type: 'reasoning-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'tool-call':\n                      // when a json response tool is used, the tool call is returned as text,\n                      // so we ignore the tool call content:\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: 'tool-input-end',\n                          id: contentBlock.toolCallId,\n                        });\n                        controller.enqueue(contentBlock);\n                      }\n                      break;\n                  }\n\n                  delete contentBlocks[value.index];\n                }\n\n                blockType = undefined; // reset block type\n\n                return;\n              }\n\n              case 'content_block_delta': {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case 'text_delta': {\n                    // when a json response tool is used, the tool call is returned as text,\n                    // so we ignore the text content:\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n\n                    controller.enqueue({\n                      type: 'text-delta',\n                      id: String(value.index),\n                      delta: value.delta.text,\n                    });\n\n                    return;\n                  }\n\n                  case 'thinking_delta': {\n                    controller.enqueue({\n                      type: 'reasoning-delta',\n                      id: String(value.index),\n                      delta: value.delta.thinking,\n                    });\n\n                    return;\n                  }\n\n                  case 'signature_delta': {\n                    // signature are only supported on thinking blocks:\n                    if (blockType === 'thinking') {\n                      controller.enqueue({\n                        type: 'reasoning-delta',\n                        id: String(value.index),\n                        delta: '',\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature,\n                          } satisfies AnthropicReasoningMetadata,\n                        },\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'input_json_delta': {\n                    const contentBlock = contentBlocks[value.index];\n                    const delta = value.delta.partial_json;\n\n                    if (usesJsonResponseTool) {\n                      if (contentBlock?.type !== 'text') {\n                        return;\n                      }\n\n                      controller.enqueue({\n                        type: 'text-delta',\n                        id: String(value.index),\n                        delta,\n                      });\n                    } else {\n                      if (contentBlock?.type !== 'tool-call') {\n                        return;\n                      }\n\n                      controller.enqueue({\n                        type: 'tool-input-delta',\n                        id: contentBlock.toolCallId,\n                        delta,\n                      });\n\n                      contentBlock.input += delta;\n                    }\n\n                    return;\n                  }\n\n                  case 'citations_delta': {\n                    const citation = value.delta.citation;\n\n                    processCitation(\n                      citation,\n                      citationDocuments,\n                      generateId,\n                      source => controller.enqueue(source),\n                    );\n                    // Web search citations are handled in web_search_tool_result content block\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'message_start': {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens =\n                  value.message.usage.cache_read_input_tokens ?? undefined;\n\n                providerMetadata = {\n                  anthropic: {\n                    usage: value.message.usage as JSONObject,\n                    cacheCreationInputTokens:\n                      value.message.usage.cache_creation_input_tokens ?? null,\n                  },\n                };\n\n                controller.enqueue({\n                  type: 'response-metadata',\n                  id: value.message.id ?? undefined,\n                  modelId: value.message.model ?? undefined,\n                });\n\n                return;\n              }\n\n              case 'message_delta': {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens =\n                  (usage.inputTokens ?? 0) + (value.usage.output_tokens ?? 0);\n\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool,\n                });\n                return;\n              }\n\n              case 'message_stop': {\n                controller.enqueue({\n                  type: 'finish',\n                  finishReason,\n                  usage,\n                  providerMetadata,\n                });\n                return;\n              }\n\n              case 'error': {\n                controller.enqueue({ type: 'error', error: value.error });\n                return;\n              }\n\n              default: {\n                const _exhaustiveCheck: never = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          },\n        }),\n      ),\n      request: { body },\n      response: { headers: responseHeaders },\n    };\n  }\n}\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst anthropicMessagesResponseSchema = z.object({\n  type: z.literal('message'),\n  id: z.string().nullish(),\n  model: z.string().nullish(),\n  content: z.array(\n    z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('text'),\n        text: z.string(),\n        citations: z.array(citationSchema).optional(),\n      }),\n      z.object({\n        type: z.literal('thinking'),\n        thinking: z.string(),\n        signature: z.string(),\n      }),\n      z.object({\n        type: z.literal('redacted_thinking'),\n        data: z.string(),\n      }),\n      z.object({\n        type: z.literal('tool_use'),\n        id: z.string(),\n        name: z.string(),\n        input: z.unknown(),\n      }),\n      z.object({\n        type: z.literal('server_tool_use'),\n        id: z.string(),\n        name: z.string(),\n        input: z.record(z.string(), z.unknown()).nullish(),\n      }),\n      z.object({\n        type: z.literal('web_search_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.array(\n            z.object({\n              type: z.literal('web_search_result'),\n              url: z.string(),\n              title: z.string(),\n              encrypted_content: z.string(),\n              page_age: z.string().nullish(),\n            }),\n          ),\n          z.object({\n            type: z.literal('web_search_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('code_execution_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.object({\n            type: z.literal('code_execution_result'),\n            stdout: z.string(),\n            stderr: z.string(),\n            return_code: z.number(),\n          }),\n          z.object({\n            type: z.literal('code_execution_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n    ]),\n  ),\n  stop_reason: z.string().nullish(),\n  usage: z.looseObject({\n    input_tokens: z.number(),\n    output_tokens: z.number(),\n    cache_creation_input_tokens: z.number().nullish(),\n    cache_read_input_tokens: z.number().nullish(),\n  }),\n});\n\n// limited version of the schema, focused on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst anthropicMessagesChunkSchema = z.discriminatedUnion('type', [\n  z.object({\n    type: z.literal('message_start'),\n    message: z.object({\n      id: z.string().nullish(),\n      model: z.string().nullish(),\n      usage: z.looseObject({\n        input_tokens: z.number(),\n        output_tokens: z.number(),\n        cache_creation_input_tokens: z.number().nullish(),\n        cache_read_input_tokens: z.number().nullish(),\n      }),\n    }),\n  }),\n  z.object({\n    type: z.literal('content_block_start'),\n    index: z.number(),\n    content_block: z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('text'),\n        text: z.string(),\n      }),\n      z.object({\n        type: z.literal('thinking'),\n        thinking: z.string(),\n      }),\n      z.object({\n        type: z.literal('tool_use'),\n        id: z.string(),\n        name: z.string(),\n      }),\n      z.object({\n        type: z.literal('redacted_thinking'),\n        data: z.string(),\n      }),\n      z.object({\n        type: z.literal('server_tool_use'),\n        id: z.string(),\n        name: z.string(),\n        input: z.record(z.string(), z.unknown()).nullish(),\n      }),\n      z.object({\n        type: z.literal('web_search_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.array(\n            z.object({\n              type: z.literal('web_search_result'),\n              url: z.string(),\n              title: z.string(),\n              encrypted_content: z.string(),\n              page_age: z.string().nullish(),\n            }),\n          ),\n          z.object({\n            type: z.literal('web_search_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('code_execution_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.object({\n            type: z.literal('code_execution_result'),\n            stdout: z.string(),\n            stderr: z.string(),\n            return_code: z.number(),\n          }),\n          z.object({\n            type: z.literal('code_execution_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n    ]),\n  }),\n  z.object({\n    type: z.literal('content_block_delta'),\n    index: z.number(),\n    delta: z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('input_json_delta'),\n        partial_json: z.string(),\n      }),\n      z.object({\n        type: z.literal('text_delta'),\n        text: z.string(),\n      }),\n      z.object({\n        type: z.literal('thinking_delta'),\n        thinking: z.string(),\n      }),\n      z.object({\n        type: z.literal('signature_delta'),\n        signature: z.string(),\n      }),\n      z.object({\n        type: z.literal('citations_delta'),\n        citation: citationSchema,\n      }),\n    ]),\n  }),\n  z.object({\n    type: z.literal('content_block_stop'),\n    index: z.number(),\n  }),\n  z.object({\n    type: z.literal('error'),\n    error: z.object({\n      type: z.string(),\n      message: z.string(),\n    }),\n  }),\n  z.object({\n    type: z.literal('message_delta'),\n    delta: z.object({ stop_reason: z.string().nullish() }),\n    usage: z.object({ output_tokens: z.number() }),\n  }),\n  z.object({\n    type: z.literal('message_stop'),\n  }),\n  z.object({\n    type: z.literal('ping'),\n  }),\n]);\n\nexport const anthropicReasoningMetadataSchema = z.object({\n  signature: z.string().optional(),\n  redactedData: z.string().optional(),\n});\n\nexport type AnthropicReasoningMetadata = z.infer<\n  typeof anthropicReasoningMetadataSchema\n>;\n","import { createJsonErrorResponseHandler } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const anthropicErrorDataSchema = z.object({\n  type: z.literal('error'),\n  error: z.object({\n    type: z.string(),\n    message: z.string(),\n  }),\n});\n\nexport type AnthropicErrorData = z.infer<typeof anthropicErrorDataSchema>;\n\nexport const anthropicFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n","import { z } from 'zod/v4';\n\n// https://docs.anthropic.com/claude/docs/models-overview\nexport type AnthropicMessagesModelId =\n  | 'claude-opus-4-20250514'\n  | 'claude-sonnet-4-20250514'\n  | 'claude-3-7-sonnet-20250219'\n  | 'claude-3-5-sonnet-latest'\n  | 'claude-3-5-sonnet-20241022'\n  | 'claude-3-5-sonnet-20240620'\n  | 'claude-3-5-haiku-latest'\n  | 'claude-3-5-haiku-20241022'\n  | 'claude-3-opus-latest'\n  | 'claude-3-opus-20240229'\n  | 'claude-3-sonnet-20240229'\n  | 'claude-3-haiku-20240307'\n  | (string & {});\n\n/**\n * Anthropic file part provider options for document-specific features.\n * These options apply to individual file parts (documents).\n */\nexport const anthropicFilePartProviderOptions = z.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: z\n    .object({\n      /**\n       * Enable citations for this document\n       */\n      enabled: z.boolean(),\n    })\n    .optional(),\n\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: z.string().optional(),\n\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: z.string().optional(),\n});\n\nexport type AnthropicFilePartProviderOptions = z.infer<\n  typeof anthropicFilePartProviderOptions\n>;\n\nexport const anthropicProviderOptions = z.object({\n  sendReasoning: z.boolean().optional(),\n\n  thinking: z\n    .object({\n      type: z.union([z.literal('enabled'), z.literal('disabled')]),\n      budgetTokens: z.number().optional(),\n    })\n    .optional(),\n\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: z.boolean().optional(),\n});\n\nexport type AnthropicProviderOptions = z.infer<typeof anthropicProviderOptions>;\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { AnthropicTool, AnthropicToolChoice } from './anthropic-api-types';\nimport { getCacheControl } from './get-cache-control';\nimport { webSearch_20250305ArgsSchema } from './tool/web-search_20250305';\nimport { webFetch_20250910ArgsSchema } from './tool/web-fetch_20250910';\n\nfunction isWebSearchTool(\n  tool: unknown,\n): tool is Extract<AnthropicTool, { type: 'web_search_20250305' }> {\n  return (\n    typeof tool === 'object' &&\n    tool !== null &&\n    'type' in tool &&\n    tool.type === 'web_search_20250305'\n  );\n}\n\nfunction isWebFetchTool(\n  tool: unknown,\n): tool is Extract<AnthropicTool, { type: 'web_fetch_20250910' }> {\n  return (\n    typeof tool === 'object' &&\n    tool !== null &&\n    'type' in tool &&\n    tool.type === 'web_fetch_20250910'\n  );\n}\n\nexport function prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  disableParallelToolUse?: boolean;\n}): {\n  tools: Array<AnthropicTool> | undefined;\n  toolChoice: AnthropicToolChoice | undefined;\n  toolWarnings: LanguageModelV2CallWarning[];\n  betas: Set<string>;\n} {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n  const betas = new Set<string>();\n\n  if (tools == null) {\n    return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n  }\n\n  const anthropicTools: AnthropicTool[] = [];\n\n  for (const tool of tools) {\n    // handle direct web search tool objects passed from provider options\n    if (isWebSearchTool(tool)) {\n      anthropicTools.push(tool);\n      continue;\n    }\n\n    // handle direct web fetch tool objects passed from provider options\n    if (isWebFetchTool(tool)) {\n      anthropicTools.push(tool);\n      continue;\n    }\n\n    switch (tool.type) {\n      case 'function':\n        const cacheControl = getCacheControl(tool.providerOptions);\n\n        anthropicTools.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl,\n        });\n        break;\n      case 'provider-defined':\n        switch (tool.id) {\n          case 'anthropic.computer_20250124':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20250124',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n            });\n            break;\n          case 'anthropic.computer_20241022':\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20241022',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n            });\n            break;\n          case 'anthropic.text_editor_20250124':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20250124',\n            });\n            break;\n          case 'anthropic.text_editor_20241022':\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20241022',\n            });\n            break;\n          case 'anthropic.text_editor_20250429':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_based_edit_tool',\n              type: 'text_editor_20250429',\n            });\n            break;\n          case 'anthropic.bash_20250124':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20250124',\n            });\n            break;\n          case 'anthropic.bash_20241022':\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20241022',\n            });\n            break;\n          case 'anthropic.web_search_20250305': {\n            const args = webSearch_20250305ArgsSchema.parse(tool.args);\n            anthropicTools.push({\n              type: 'web_search_20250305',\n              name: 'web_search',\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation,\n            });\n            break;\n          }\n          case 'anthropic.web_fetch_20250910': {\n            betas.add('web-fetch-2025-09-10');\n            const args = webFetch_20250910ArgsSchema.parse(tool.args);\n            anthropicTools.push({\n              type: 'web_fetch_20250910',\n              name: 'web_fetch',\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              citations: args.citations,\n              max_content_tokens: args.maxContentTokens,\n            });\n            break;\n          }\n          case 'anthropic.code_execution_20250522': {\n            betas.add('code-execution-2025-05-22');\n            anthropicTools.push({\n              type: 'code_execution_20250522',\n              name: 'code_execution',\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: 'unsupported-tool', tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n    }\n  }\n\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools,\n      toolChoice: disableParallelToolUse\n        ? { type: 'auto', disable_parallel_tool_use: disableParallelToolUse }\n        : undefined,\n      toolWarnings,\n      betas,\n    };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'auto',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'required':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'any',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'none':\n      // Anthropic does not support 'none' tool choice, so we remove the tools:\n      return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n    case 'tool':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'tool',\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import { SharedV2ProviderMetadata } from '@ai-sdk/provider';\nimport { AnthropicCacheControl } from './anthropic-api-types';\n\nexport function getCacheControl(\n  providerMetadata: SharedV2ProviderMetadata | undefined,\n): AnthropicCacheControl | undefined {\n  const anthropic = providerMetadata?.anthropic;\n\n  // allow both cacheControl and cache_control:\n  const cacheControlValue = anthropic?.cacheControl ?? anthropic?.cache_control;\n\n  // Pass through value assuming it is of the correct type.\n  // The Anthropic API will validate the value.\n  return cacheControlValue as AnthropicCacheControl | undefined;\n}\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// Args validation schema\nexport const webSearch_20250305ArgsSchema = z.object({\n  /**\n   * Maximum number of web searches Claude can perform during the conversation.\n   */\n  maxUses: z.number().optional(),\n\n  /**\n   * Optional list of domains that Claude is allowed to search.\n   */\n  allowedDomains: z.array(z.string()).optional(),\n\n  /**\n   * Optional list of domains that Claude should avoid when searching.\n   */\n  blockedDomains: z.array(z.string()).optional(),\n\n  /**\n   * Optional user location information to provide geographically relevant search results.\n   */\n  userLocation: z\n    .object({\n      type: z.literal('approximate'),\n      city: z.string().optional(),\n      region: z.string().optional(),\n      country: z.string().optional(),\n      timezone: z.string().optional(),\n    })\n    .optional(),\n});\n\nexport const webSearch_20250305OutputSchema = z.array(\n  z.object({\n    url: z.string(),\n    title: z.string(),\n    pageAge: z.string().nullable(),\n    encryptedContent: z.string(),\n    type: z.string(),\n  }),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The search query to execute.\n     */\n    query: string;\n  },\n  Array<{\n    url: string;\n    title: string;\n    pageAge: string | null;\n    encryptedContent: string;\n    type: string;\n  }>,\n  {\n    /**\n     * Maximum number of web searches Claude can perform during the conversation.\n     */\n    maxUses?: number;\n\n    /**\n     * Optional list of domains that Claude is allowed to search.\n     */\n    allowedDomains?: string[];\n\n    /**\n     * Optional list of domains that Claude should avoid when searching.\n     */\n    blockedDomains?: string[];\n\n    /**\n     * Optional user location information to provide geographically relevant search results.\n     */\n    userLocation?: {\n      type: 'approximate';\n      city?: string;\n      region?: string;\n      country?: string;\n      timezone?: string;\n    };\n  }\n>({\n  id: 'anthropic.web_search_20250305',\n  name: 'web_search',\n  inputSchema: z.object({\n    query: z.string(),\n  }),\n  outputSchema: webSearch_20250305OutputSchema,\n});\n\nexport const webSearch_20250305 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// Args validation schema\nexport const webFetch_20250910ArgsSchema = z.object({\n  /**\n   * Maximum number of web fetches Claude can perform during the conversation.\n   */\n  maxUses: z.number().optional(),\n\n  /**\n   * Optional list of domains that Claude is allowed to fetch from.\n   */\n  allowedDomains: z.array(z.string()).optional(),\n\n  /**\n   * Optional list of domains that Claude should avoid when fetching.\n   */\n  blockedDomains: z.array(z.string()).optional(),\n\n  /**\n   * Whether to include citations in the fetched content.\n   */\n  citations: z.boolean().optional(),\n\n  /**\n   * Maximum number of tokens for the fetched content.\n   */\n  maxContentTokens: z.number().optional(),\n});\n\nexport const webFetch_20250910OutputSchema = z.object({\n  url: z.string(),\n  documentType: z.string(),\n  contentSource: z.string(),\n  title: z.string().optional(),\n  content: z.string(),\n  citations: z.array(\n    z.object({\n      text: z.string(),\n      location: z.string(),\n    }),\n  ).optional(),\n});\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The URL to fetch content from.\n     */\n    url: string;\n  },\n  {\n    url: string;\n    documentType: string;\n    contentSource: string;\n    title?: string;\n    content: string;\n    citations?: Array<{\n      text: string;\n      location: string;\n    }>;\n  },\n  {\n    /**\n     * Maximum number of web fetches Claude can perform during the conversation.\n     */\n    maxUses?: number;\n\n    /**\n     * Optional list of domains that Claude is allowed to fetch from.\n     */\n    allowedDomains?: string[];\n\n    /**\n     * Optional list of domains that Claude should avoid when fetching.\n     */\n    blockedDomains?: string[];\n\n    /**\n     * Whether to include citations in the fetched content.\n     */\n    citations?: boolean;\n\n    /**\n     * Maximum number of tokens for the fetched content.\n     */\n    maxContentTokens?: number;\n  }\n>({\n  id: 'anthropic.web_fetch_20250910',\n  name: 'web_fetch',\n  inputSchema: z.object({\n    url: z.string(),\n  }),\n  outputSchema: webFetch_20250910OutputSchema,\n});\n\nexport const webFetch_20250910 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};","import {\n  LanguageModelV2CallWarning,\n  LanguageModelV2DataContent,\n  LanguageModelV2Message,\n  LanguageModelV2Prompt,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { convertToBase64, parseProviderOptions } from '@ai-sdk/provider-utils';\nimport {\n  AnthropicAssistantMessage,\n  AnthropicMessagesPrompt,\n  AnthropicToolResultContent,\n  AnthropicUserMessage,\n} from './anthropic-api-types';\nimport { anthropicReasoningMetadataSchema } from './anthropic-messages-language-model';\nimport { anthropicFilePartProviderOptions } from './anthropic-messages-options';\nimport { getCacheControl } from './get-cache-control';\nimport { webSearch_20250305OutputSchema } from './tool/web-search_20250305';\nimport { codeExecution_20250522OutputSchema } from './tool/code-execution_20250522';\n\nfunction convertToString(data: LanguageModelV2DataContent): string {\n  if (typeof data === 'string') {\n    return Buffer.from(data, 'base64').toString('utf-8');\n  }\n\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n\n  if (data instanceof URL) {\n    throw new UnsupportedFunctionalityError({\n      functionality: 'URL-based text documents are not supported for citations',\n    });\n  }\n\n  throw new UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`,\n  });\n}\n\nexport async function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings,\n}: {\n  prompt: LanguageModelV2Prompt;\n  sendReasoning: boolean;\n  warnings: LanguageModelV2CallWarning[];\n}): Promise<{\n  prompt: AnthropicMessagesPrompt;\n  betas: Set<string>;\n}> {\n  const betas = new Set<string>();\n  const blocks = groupIntoBlocks(prompt);\n\n  let system: AnthropicMessagesPrompt['system'] = undefined;\n  const messages: AnthropicMessagesPrompt['messages'] = [];\n\n  async function shouldEnableCitations(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<boolean> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return anthropicOptions?.citations?.enabled ?? false;\n  }\n\n  async function getDocumentMetadata(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<{ title?: string; context?: string }> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return {\n      title: anthropicOptions?.title,\n      context: anthropicOptions?.context,\n    };\n  }\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n\n    switch (type) {\n      case 'system': {\n        if (system != null) {\n          throw new UnsupportedFunctionalityError({\n            functionality:\n              'Multiple system messages that are separated by user/assistant messages',\n          });\n        }\n\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: 'text',\n          text: content,\n          cache_control: getCacheControl(providerOptions),\n        }));\n\n        break;\n      }\n\n      case 'user': {\n        // combines all user and tool messages in this block into a single message:\n        const anthropicContent: AnthropicUserMessage['content'] = [];\n\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case 'user': {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = j === content.length - 1;\n\n                const cacheControl =\n                  getCacheControl(part.providerOptions) ??\n                  (isLastPart\n                    ? getCacheControl(message.providerOptions)\n                    : undefined);\n\n                switch (part.type) {\n                  case 'text': {\n                    anthropicContent.push({\n                      type: 'text',\n                      text: part.text,\n                      cache_control: cacheControl,\n                    });\n                    break;\n                  }\n\n                  case 'file': {\n                    if (part.mediaType.startsWith('image/')) {\n                      anthropicContent.push({\n                        type: 'image',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type:\n                                  part.mediaType === 'image/*'\n                                    ? 'image/jpeg'\n                                    : part.mediaType,\n                                data: convertToBase64(part.data),\n                              },\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'application/pdf') {\n                      betas.add('pdfs-2024-09-25');\n\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type: 'application/pdf',\n                                data: convertToBase64(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'text/plain') {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'text',\n                                media_type: 'text/plain',\n                                data: convertToString(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else {\n                      throw new UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`,\n                      });\n                    }\n\n                    break;\n                  }\n                }\n              }\n\n              break;\n            }\n            case 'tool': {\n              for (let i = 0; i < content.length; i++) {\n                const part = content[i];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = i === content.length - 1;\n\n                const cacheControl =\n                  getCacheControl(part.providerOptions) ??\n                  (isLastPart\n                    ? getCacheControl(message.providerOptions)\n                    : undefined);\n\n                const output = part.output;\n                let contentValue: AnthropicToolResultContent['content'];\n                switch (output.type) {\n                  case 'content':\n                    contentValue = output.value.map(contentPart => {\n                      switch (contentPart.type) {\n                        case 'text':\n                          return {\n                            type: 'text',\n                            text: contentPart.text,\n                            cache_control: undefined,\n                          };\n                        case 'media': {\n                          if (contentPart.mediaType.startsWith('image/')) {\n                            return {\n                              type: 'image',\n                              source: {\n                                type: 'base64',\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data,\n                              },\n                              cache_control: undefined,\n                            };\n                          }\n\n                          throw new UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`,\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case 'text':\n                  case 'error-text':\n                    contentValue = output.value;\n                    break;\n                  case 'json':\n                  case 'error-json':\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_result',\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error:\n                    output.type === 'error-text' || output.type === 'error-json'\n                      ? true\n                      : undefined,\n                  cache_control: cacheControl,\n                });\n              }\n\n              break;\n            }\n            default: {\n              const _exhaustiveCheck: never = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n\n        messages.push({ role: 'user', content: anthropicContent });\n\n        break;\n      }\n\n      case 'assistant': {\n        // combines multiple assistant messages in this block into a single message:\n        const anthropicContent: AnthropicAssistantMessage['content'] = [];\n\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n\n            // cache control: first add cache control from part.\n            // for the last part of a message,\n            // check also if the message has cache control.\n            const cacheControl =\n              getCacheControl(part.providerOptions) ??\n              (isLastContentPart\n                ? getCacheControl(message.providerOptions)\n                : undefined);\n\n            switch (part.type) {\n              case 'text': {\n                anthropicContent.push({\n                  type: 'text',\n                  text:\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart\n                      ? part.text.trim()\n                      : part.text,\n\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'reasoning': {\n                if (sendReasoning) {\n                  const reasoningMetadata = await parseProviderOptions({\n                    provider: 'anthropic',\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema,\n                  });\n\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      anthropicContent.push({\n                        type: 'thinking',\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                        cache_control: cacheControl,\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      anthropicContent.push({\n                        type: 'redacted_thinking',\n                        data: reasoningMetadata.redactedData,\n                        cache_control: cacheControl,\n                      });\n                    } else {\n                      warnings.push({\n                        type: 'other',\n                        message: 'unsupported reasoning metadata',\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: 'other',\n                      message: 'unsupported reasoning metadata',\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: 'other',\n                    message:\n                      'sending reasoning content is disabled for this model',\n                  });\n                }\n                break;\n              }\n\n              case 'tool-call': {\n                if (part.providerExecuted) {\n                  if (part.toolName === 'web_search') {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: 'web_search',\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n\n                    break;\n                  }\n\n                  if (part.toolName === 'code_execution') {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: 'code_execution',\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n\n                    break;\n                  }\n\n                  warnings.push({\n                    type: 'other',\n                    message: `provider executed tool call for tool ${part.toolName} is not supported`,\n                  });\n\n                  break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_use',\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'tool-result': {\n                if (part.toolName === 'web_search') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const webSearchOutput = webSearch_20250305OutputSchema.parse(\n                    output.value,\n                  );\n\n                  anthropicContent.push({\n                    type: 'web_search_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map(result => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type,\n                    })),\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                if (part.toolName === 'code_execution') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const codeExecutionOutput =\n                    codeExecution_20250522OutputSchema.parse(output.value);\n\n                  anthropicContent.push({\n                    type: 'code_execution_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: codeExecutionOutput.type,\n                      stdout: codeExecutionOutput.stdout,\n                      stderr: codeExecutionOutput.stderr,\n                      return_code: codeExecutionOutput.return_code,\n                    },\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                warnings.push({\n                  type: 'other',\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`,\n                });\n\n                break;\n              }\n            }\n          }\n        }\n\n        messages.push({ role: 'assistant', content: anthropicContent });\n\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return {\n    prompt: { system, messages },\n    betas,\n  };\n}\n\ntype SystemBlock = {\n  type: 'system';\n  messages: Array<LanguageModelV2Message & { role: 'system' }>;\n};\ntype AssistantBlock = {\n  type: 'assistant';\n  messages: Array<LanguageModelV2Message & { role: 'assistant' }>;\n};\ntype UserBlock = {\n  type: 'user';\n  messages: Array<LanguageModelV2Message & { role: 'user' | 'tool' }>;\n};\n\nfunction groupIntoBlocks(\n  prompt: LanguageModelV2Prompt,\n): Array<SystemBlock | AssistantBlock | UserBlock> {\n  const blocks: Array<SystemBlock | AssistantBlock | UserBlock> = [];\n  let currentBlock: SystemBlock | AssistantBlock | UserBlock | undefined =\n    undefined;\n\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case 'system': {\n        if (currentBlock?.type !== 'system') {\n          currentBlock = { type: 'system', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'assistant': {\n        if (currentBlock?.type !== 'assistant') {\n          currentBlock = { type: 'assistant', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'user': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'tool': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return blocks;\n}\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const codeExecution_20250522OutputSchema = z.object({\n  type: z.literal('code_execution_result'),\n  stdout: z.string(),\n  stderr: z.string(),\n  return_code: z.number(),\n});\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The Python code to execute.\n     */\n    code: string;\n  },\n  {\n    type: 'code_execution_result';\n    stdout: string;\n    stderr: string;\n    return_code: number;\n  },\n  {}\n>({\n  id: 'anthropic.code_execution_20250522',\n  name: 'code_execution',\n  inputSchema: z.object({\n    code: z.string(),\n  }),\n  outputSchema: codeExecution_20250522OutputSchema,\n});\n\nexport const codeExecution_20250522 = (\n  args: Parameters<typeof factory>[0] = {},\n) => {\n  return factory(args);\n};\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\n/**\n * @see https://docs.anthropic.com/en/api/messages#response-stop-reason\n */\nexport function mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool,\n}: {\n  finishReason: string | null | undefined;\n  isJsonResponseFromTool?: boolean;\n}): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'pause_turn':\n    case 'end_turn':\n    case 'stop_sequence':\n      return 'stop';\n    case 'refusal':\n      return 'content-filter';\n    case 'tool_use':\n      return isJsonResponseFromTool ? 'stop' : 'tool-calls';\n    case 'max_tokens':\n      return 'length';\n    default:\n      return 'unknown';\n  }\n}\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport z from 'zod/v4';\n\nexport const bash_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20241022',\n  name: 'bash',\n  inputSchema: z.object({\n    command: z.string(),\n    restart: z.boolean().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport z from 'zod/v4';\n\nexport const bash_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20250124',\n  name: 'bash',\n  inputSchema: z.object({\n    command: z.string(),\n    restart: z.boolean().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const computer_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The action to perform. The available actions are:\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_click`: Click the left mouse button.\n     * - `left_click_drag`: Click and drag the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button.\n     * - `middle_click`: Click the middle mouse button.\n     * - `double_click`: Double-click the left mouse button.\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'type'\n      | 'mouse_move'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'screenshot'\n      | 'cursor_position';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: number[];\n\n    /**\n     * Required only by `action=type` and `action=key`.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20241022',\n  name: 'computer',\n  inputSchema: z.object({\n    action: z.enum([\n      'key',\n      'type',\n      'mouse_move',\n      'left_click',\n      'left_click_drag',\n      'right_click',\n      'middle_click',\n      'double_click',\n      'screenshot',\n      'cursor_position',\n    ]),\n    coordinate: z.array(z.number().int()).optional(),\n    text: z.string().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const computer_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `hold_key`: Hold down a key or multiple keys for a specified duration (in seconds). Supports the same syntax as `key`.\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_mouse_down`: Press the left mouse button.\n     * - `left_mouse_up`: Release the left mouse button.\n     * - `left_click`: Click the left mouse button at the specified (x, y) pixel coordinate on the screen. You can also include a key combination to hold down while clicking using the `text` parameter.\n     * - `left_click_drag`: Click and drag the cursor from `start_coordinate` to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `middle_click`: Click the middle mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `double_click`: Double-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `triple_click`: Triple-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `scroll`: Scroll the screen in a specified direction by a specified amount of clicks of the scroll wheel, at the specified (x, y) pixel coordinate. DO NOT use PageUp/PageDown to scroll.\n     * - `wait`: Wait for a specified duration (in seconds).\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'hold_key'\n      | 'type'\n      | 'cursor_position'\n      | 'mouse_move'\n      | 'left_mouse_down'\n      | 'left_mouse_up'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'triple_click'\n      | 'scroll'\n      | 'wait'\n      | 'screenshot';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: [number, number];\n\n    /**\n     * The duration to hold the key down for. Required only by `action=hold_key` and `action=wait`.\n     */\n    duration?: number;\n\n    /**\n     * The number of 'clicks' to scroll. Required only by `action=scroll`.\n     */\n    scroll_amount?: number;\n\n    /**\n     * The direction to scroll the screen. Required only by `action=scroll`.\n     */\n    scroll_direction?: 'up' | 'down' | 'left' | 'right';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to start the drag from. Required only by `action=left_click_drag`.\n     */\n    start_coordinate?: [number, number];\n\n    /**\n     * Required only by `action=type`, `action=key`, and `action=hold_key`. Can also be used by click or scroll actions to hold down keys while clicking or scrolling.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20250124',\n  name: 'computer',\n  inputSchema: z.object({\n    action: z.enum([\n      'key',\n      'hold_key',\n      'type',\n      'cursor_position',\n      'mouse_move',\n      'left_mouse_down',\n      'left_mouse_up',\n      'left_click',\n      'left_click_drag',\n      'right_click',\n      'middle_click',\n      'double_click',\n      'triple_click',\n      'scroll',\n      'wait',\n      'screenshot',\n    ]),\n    coordinate: z.tuple([z.number().int(), z.number().int()]).optional(),\n    duration: z.number().optional(),\n    scroll_amount: z.number().optional(),\n    scroll_direction: z.enum(['up', 'down', 'left', 'right']).optional(),\n    start_coordinate: z.tuple([z.number().int(), z.number().int()]).optional(),\n    text: z.string().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const textEditor_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20241022',\n  name: 'str_replace_editor',\n  inputSchema: z.object({\n    command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n    path: z.string(),\n    file_text: z.string().optional(),\n    insert_line: z.number().int().optional(),\n    new_str: z.string().optional(),\n    old_str: z.string().optional(),\n    view_range: z.array(z.number().int()).optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const textEditor_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250124',\n  name: 'str_replace_editor',\n  inputSchema: z.object({\n    command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n    path: z.string(),\n    file_text: z.string().optional(),\n    insert_line: z.number().int().optional(),\n    new_str: z.string().optional(),\n    old_str: z.string().optional(),\n    view_range: z.array(z.number().int()).optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const textEditor_20250429 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`.\n     * Note: `undo_edit` is not supported in Claude 4 models.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250429',\n  name: 'str_replace_based_edit_tool',\n  inputSchema: z.object({\n    command: z.enum(['view', 'create', 'str_replace', 'insert']),\n    path: z.string(),\n    file_text: z.string().optional(),\n    insert_line: z.number().int().optional(),\n    new_str: z.string().optional(),\n    old_str: z.string().optional(),\n    view_range: z.array(z.number().int()).optional(),\n  }),\n});\n","import { bash_20241022 } from './tool/bash_20241022';\nimport { bash_20250124 } from './tool/bash_20250124';\nimport { computer_20241022 } from './tool/computer_20241022';\nimport { computer_20250124 } from './tool/computer_20250124';\nimport { textEditor_20241022 } from './tool/text-editor_20241022';\nimport { textEditor_20250124 } from './tool/text-editor_20250124';\nimport { textEditor_20250429 } from './tool/text-editor_20250429';\nimport { webSearch_20250305 } from './tool/web-search_20250305';\nimport { webFetch_20250910 } from './tool/web-fetch_20250910';\nimport { codeExecution_20250522 } from './tool/code-execution_20250522';\n\nexport const anthropicTools = {\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20241022,\n\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20250124,\n\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250522,\n\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20250124,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20241022,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20250124,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command.\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   */\n  textEditor_20250429,\n\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_search`.\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305,\n\n  /**\n   * Creates a web fetch tool that allows Claude to fetch and analyze content from specific URLs.\n   * This tool is designed to retrieve web pages and documents that are explicitly mentioned\n   * in the conversation, enabling Claude to access and process web content directly.\n   *\n   * Tool name must be `web_fetch`.\n   *\n   * @param maxUses - Maximum number of web fetches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to fetch from.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when fetching.\n   * @param citations - Whether to include citations in the fetched content.\n   * @param maxContentTokens - Maximum number of tokens for the fetched content.\n   */\n  webFetch_20250910,\n};\n"],"mappings":"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","names":["import_provider","import_provider_utils","import_v4","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4","factory","anthropicTools","import_provider","import_provider_utils","import_provider_utils","import_v4","factory","_a","_b","i","generateId","anthropicTools","_a","import_provider_utils","import_v4","z","import_provider_utils","import_v4","z","import_provider_utils","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4"]}